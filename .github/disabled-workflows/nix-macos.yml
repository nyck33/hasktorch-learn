name: nix-macos

on: [push, pull_request]

env:
  NIX_OPTIONS: -L -j 1 --impure

jobs:
  # tests:
  #   runs-on: macOS-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: cachix/install-nix-action@v10
  #     - run: nix-env -iA cachix -f https://cachix.org/api/v1/install
  #     - run: cachix use hasktorch
  #     - run: cachix use iohk
  #     - run: |
  #         nix-build -j 2 -A haskellPackages.libtorch-ffi.checks.spec
  #         nix-build -j 2 -A haskellPackages.hasktorch.checks.spec
  #         nix-build -j 2 -A haskellPackages.examples.checks.spec
  build-cache:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v8
        with:
          name: hasktorch
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - run: |
          nix --version
          #sed -i -e 's/"x86_64-linux"//g' flake.nix
          #nix flake show
#      - uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 15
      - run: |
          nix build '.#codegen:test:doctests' $NIX_OPTIONS
          nix build '.#checks.x86_64-darwin.codegen:test:spec' $NIX_OPTIONS
          nix build '.#checks.x86_64-darwin.hasktorch-cpu:test:spec' $NIX_OPTIONS
          nix build '.#checks.x86_64-darwin.hasktorch-gradually-typed-cpu:test:spec' $NIX_OPTIONS
          nix build '.#libtorch-ffi-cpu:test:spec' $NIX_OPTIONS
          nix build '.#checks.x86_64-darwin.libtorch-ffi-cpu:test:spec' $NIX_OPTIONS

          run-nix-build () {
            nix build $@ --derivation && nix build $@ $NIX_OPTIONS
          }
          run-nix-build '.#bounding-box-cpu:exe:bounding-box'
          run-nix-build '.#codegen:exe:codegen-exe'
          run-nix-build '.#dataloader-cifar10-cpu:exe:dataloader-cifar10'
          run-nix-build '.#examples-cpu:exe:alexNet'
          run-nix-build '.#examples-cpu:exe:autograd'
          run-nix-build '.#examples-cpu:exe:distill'
          run-nix-build '.#examples-cpu:exe:gaussian-process'
          run-nix-build '.#examples-cpu:exe:gd-field'
          run-nix-build '.#examples-cpu:exe:image-processing'
          run-nix-build '.#examples-cpu:exe:iris-classification'
          run-nix-build '.#examples-cpu:exe:load-torchscript'
          run-nix-build '.#examples-cpu:exe:matrix-factorization'
          run-nix-build '.#examples-cpu:exe:minimal-text-example'
          run-nix-build '.#examples-cpu:exe:mnist-mixed-precision'
          run-nix-build '.#examples-cpu:exe:mnist-mlp'
          run-nix-build '.#examples-cpu:exe:optimizers'
          run-nix-build '.#examples-cpu:exe:optimizers-cpp'
          run-nix-build '.#examples-cpu:exe:optimizers-cpp-typed'
          run-nix-build '.#examples-cpu:exe:regression'
          run-nix-build '.#examples-cpu:exe:regularization'
          run-nix-build '.#examples-cpu:exe:rnn'
          run-nix-build '.#examples-cpu:exe:serialization'
          run-nix-build '.#examples-cpu:exe:static-mnist-cnn'
          run-nix-build '.#examples-cpu:exe:static-mnist-mlp'
          run-nix-build '.#examples-cpu:exe:static-xor-mlp'
          run-nix-build '.#examples-cpu:exe:typed-transformer'
          run-nix-build '.#examples-cpu:exe:vae'
          run-nix-build '.#examples-cpu:exe:xor-mlp'
          run-nix-build '.#hasktorch-gradually-typed-cpu:exe:linear-regression'
          run-nix-build '.#hasktorch-gradually-typed-cpu:exe:neural-interpreter'
          run-nix-build '.#hasktorch-gradually-typed-cpu:exe:two-layer-network'
          run-nix-build '.#untyped-nlp-cpu:exe:untyped-nlp'

