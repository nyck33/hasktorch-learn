name: nix-linux-cu10

on:
  push:
    branches:
      - master

env:
  NIX_OPTIONS: -L -j 1 --impure

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: free disk space
  #       run: |
  #         sudo swapoff -a
  #         sudo rm -f /swapfile
  #         sudo apt -y purge ghc* cabal-install* php* || true
  #         sudo apt autoremove -y || true
  #         sudo apt autoclean -y || true
  #         docker rmi $(docker image ls -aq)
  #         df -h
  #     - uses: cachix/install-nix-action@v10
  #     - run: nix-env -iA cachix -f https://cachix.org/api/v1/install
  #     - run: cachix use hasktorch
  #     - run: cachix use iohk
  #     - run: |
  #         nix-build -j 2 -A haskellPackages.libtorch-ffi.checks.spec
  #         nix-build -j 2 -A haskellPackages.hasktorch.checks.spec
  #         nix-build -j 2 -A haskellPackages.examples.checks.spec
  build-cache:
    if: github.repository == 'hasktorch/hasktorch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: free disk space
        run: |
          sudo apt -y purge ghc* cabal-install* php* || true
          sudo apt autoremove -y || true
          sudo apt autoclean -y || true
          docker rmi $(docker image ls -aq)
          df -h
          cat /proc/cpuinfo
          cat /proc/meminfo
      - uses: cachix/install-nix-action@v23
      - uses: cachix/cachix-action@v12
        with:
          name: hasktorch
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - run: |
          ps -aux
          free
          export NIX_BUILD_CORES=1

          nix build '.#codegen:test:doctests' $NIX_OPTIONS
          nix build '.#checks.x86_64-linux.codegen:test:spec' $NIX_OPTIONS
          nix build '.#hasktorch-cuda-10:test:doctests' $NIX_OPTIONS
          nix build '.#checks.x86_64-linux.hasktorch-cuda-10:test:spec' $NIX_OPTIONS
          nix build '.#hasktorch-gradually-typed-cuda-10:test:doctests' $NIX_OPTIONS
          nix build '.#checks.x86_64-linux.hasktorch-gradually-typed-cuda-10:test:spec' $NIX_OPTIONS
          nix build '.#libtorch-ffi-cuda-10:test:spec' $NIX_OPTIONS
          nix build '.#checks.x86_64-linux.libtorch-ffi-cuda-10:test:spec' $NIX_OPTIONS

      - run: |
          ps -aux
          free
          export NIX_BUILD_CORES=1

          nix build '.#bounding-box-cuda-10:exe:bounding-box' $NIX_OPTIONS
          nix build '.#codegen:exe:codegen-exe' $NIX_OPTIONS
          nix build '.#dataloader-cifar10-cuda-10:exe:dataloader-cifar10' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:alexNet' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:autograd' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:distill' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:gaussian-process' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:gd-field' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:image-processing' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:iris-classification' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:load-torchscript' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:matrix-factorization' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:minimal-text-example' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:mnist-mixed-precision' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:mnist-mlp' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:optimizers' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:optimizers-cpp' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:optimizers-cpp-typed' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:regression' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:regularization' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:rnn' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:serialization' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:static-mnist-cnn' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:static-mnist-mlp' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:static-xor-mlp' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:typed-transformer' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:vae' $NIX_OPTIONS
          nix build '.#examples-cuda-10:exe:xor-mlp' $NIX_OPTIONS
          nix build '.#hasktorch-gradually-typed-cuda-10:exe:linear-regression' $NIX_OPTIONS
          nix build '.#hasktorch-gradually-typed-cuda-10:exe:neural-interpreter' $NIX_OPTIONS
          nix build '.#hasktorch-gradually-typed-cuda-10:exe:two-layer-network' $NIX_OPTIONS
          nix build '.#untyped-nlp-cuda-10:exe:untyped-nlp' $NIX_OPTIONS
